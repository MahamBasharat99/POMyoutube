"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageBase = exports.Dictionary = exports.WebElementEx = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
class WebElementEx extends selenium_webdriver_1.WebElement {
    constructor(original, styleDictionary) {
        super(original.getDriver(), original.getId());
        this.styleDictionary = styleDictionary;
    }
    querySelector(css) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.findElement(selenium_webdriver_1.By.css(this.styleDictionary.get(css)))
                .then(webele => new WebElementEx(webele, this.styleDictionary));
        });
    }
    querySelectorAll(css) {
        return __awaiter(this, void 0, void 0, function* () {
            return Array
                .from(yield this.findElements(selenium_webdriver_1.By.css(this.styleDictionary.get(css))))
                .map(webele => new WebElementEx(webele, this.styleDictionary));
        });
    }
}
exports.WebElementEx = WebElementEx;
class Dictionary {
    constructor(data) {
        this.data = data || {};
    }
    add(key, value) {
        this.data[key] = value;
        return this;
    }
    get(key) {
        return key in this.data ? this.data[key] : key;
    }
    merge(data) {
        this.data = Object.assign(Object.assign({}, this.data), data);
        return this;
    }
    renew(data) {
        this.data = data;
        return this;
    }
}
exports.Dictionary = Dictionary;
class PageBase {
    constructor(driver, options) {
        this.driver = driver;
        this.options = Object.assign({ maxWaitMs: 10000 }, options);
        this.styleDictionary = new Dictionary();
        this.initializeStyleDictionary();
        this.Key = selenium_webdriver_1.Key;
    }
    initializeStyleDictionary() {
        // nop, inherits should override if needed
    }
    executeScript(script) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driver.executeScript(script);
        });
    }
    getCurrentUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driver.getCurrentUrl();
        });
    }
    getTitle() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driver.getTitle();
        });
    }
    goHome() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.goTo(this.options.homePath);
        });
    }
    goTo(urlOrPath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.driver.get(urlOrPath
                ? (urlOrPath.match(/^http/i)
                    ? urlOrPath
                    : `${this.options.origin}${urlOrPath}`) : this.options.origin);
        });
    }
    isUrlValid() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    querySelector(css) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driver.wait(selenium_webdriver_1.until.elementLocated(selenium_webdriver_1.By.css(this.styleDictionary.get(css))), this.options.maxWaitMs)
                .then(webele => new WebElementEx(webele, this.styleDictionary));
        });
    }
    querySelectorAll(css) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.querySelector(css);
            return Array.from(yield this.driver.findElements(selenium_webdriver_1.By.css(this.styleDictionary.get(css))))
                .map(webele => new WebElementEx(webele, this.styleDictionary));
        });
    }
}
exports.PageBase = PageBase;
