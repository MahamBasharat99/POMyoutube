import { Key, WebDriver, WebElement } from "selenium-webdriver";
export declare class WebElementEx extends WebElement {
    protected styleDictionary: Dictionary;
    constructor(original: WebElement, styleDictionary: Dictionary);
    querySelector(css: string): Promise<WebElementEx>;
    querySelectorAll(css: string): Promise<WebElementEx[]>;
}
export declare type SelenOptions = {
    origin: string;
    homePath?: string;
    maxWaitMs?: number;
};
export declare type DictionaryKeyValue = {
    [key: string]: string;
};
export declare class Dictionary {
    protected data: DictionaryKeyValue;
    constructor(data?: DictionaryKeyValue);
    add(key: string, value: string): this;
    get(key: string): string;
    merge(data: DictionaryKeyValue): this;
    renew(data: DictionaryKeyValue): this;
}
export declare abstract class PageBase<Options extends SelenOptions = SelenOptions> {
    Key: typeof Key;
    protected driver: WebDriver;
    protected options: Options;
    styleDictionary: Dictionary;
    constructor(driver: WebDriver, options: Options);
    protected initializeStyleDictionary(): void;
    executeScript(script: string): Promise<unknown>;
    getCurrentUrl(): Promise<string>;
    getTitle(): Promise<string>;
    goHome(): Promise<void>;
    goTo(urlOrPath?: string): Promise<void>;
    isUrlValid(): Promise<boolean>;
    querySelector(css: string): Promise<WebElementEx>;
    querySelectorAll(css: string): Promise<WebElementEx[]>;
}
